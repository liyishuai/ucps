metavar x ::= {{ com variables }}
{{ repr-locally-nameless }}

grammar
e :: 'e_' ::= {{ com expressions }}
| x            ::   :: var
| 0            ::   :: zero
| S e          ::   :: succ
| e1 e2        ::   :: app
| e1 p e2      ::   :: prim
| \ x . e      ::   :: lam (+ bind x in e +)
| fix x . e    ::   :: fix (+ bind x in e +)
| ifz e { e0 | x . e1 } :: :: ifz (+ bind x in e1 +)
  {{ tex [[ifz]]~[[e]]\{[[0]]\hookrightarrow[[e0]]
                       |[[S]]~[[x]]\hookrightarrow[[e1]]\} }}
| let x = e in e' :: :: let (+ bind x in e' +)
| halt e       ::   :: halt
| ( e )        :: S :: par {{ coq ([[e]]) }}
| [ e / x ] e' :: M :: sub {{ coq (open_e_wrt_e [[x e']] [[e]]) }}

p :: 'p_' ::= {{ com primitives }}
| + :: :: plus
| - :: :: minus
| * :: :: mult {{ tex \times }}
| / :: :: div  {{ tex \div   }}

substitutions
  single e x :: subst

freevars
  e x :: fv

grammar
G {{ tex \Gamma }} :: 'g_' ::= {{ com contexts }} {{ coq list x }}
|          :: :: empty {{ coq []               }}
| G , x ok :: :: cons  {{ coq ([[x]] :: [[G]]) }}

terminals :: terminals_ ::=
| ok  :: :: ok         {{ tex \mathsf{ok}      }}
| \   :: :: lambda     {{ tex \lambda          }}
| \in :: :: in         {{ tex \in              }}
| 0   :: :: 0          {{ tex \mathsf 0        }}
| S   :: :: S          {{ tex \mathsf S        }}
| ifz :: :: ifz        {{ tex \mathsf{ifz}     }}
| let :: :: let        {{ tex \mathsf{let}     }}
| in  :: :: In         {{ tex \mathsf{in}      }}
| fix :: :: fix        {{ tex \mathsf{fix}     }}
| val :: :: val        {{ tex \mathsf{val}     }}
| halt :: :: halt      {{ tex \mathsf{halt}    }}
| |-L :: :: turnstileL {{ tex \vdash_\Lambda   }}
| |-K :: :: turnstileK {{ tex \vdash_\mathrm K }}
| ==  :: :: equiv      {{ tex \equiv           }}
| |-> :: :: mapsto     {{ tex \mapsto          }}

formula :: formula_ ::=
| judgement :: :: judgement
| x \in G   :: :: inG {{ coq In [[x]] [[G]] }}

defns
V :: '' ::=

defn
e val :: :: val :: 'Val_' {{ com values }}
by

----- :: zero
0 val

e val
------- :: succ
S e val

defn
e1 p e2 = e3 :: :: eq :: 'Arith_' {{ com arithmetics }}
by

e val
--------- :: plus0
0 + e = e

e1 + e2 = e3
---------------- :: plus1
S e1 + e2 = S e3

e val
--------- :: minus0
e - 0 = e

e val
--------- :: minus1
0 - e = 0

e1 - e2 = e3
---------------- :: minus2
S e1 - S e2 = e3

e val
--------- :: mult0
0 * e = 0

e1 * e2 = e3
e2 + e3 = e4
-------------- :: mult1
S e1 * e2 = e4

e val
----------- :: div0
0 / S e = 0

e1 - e2 = e3
e3 / e2 = e4
-------------- :: div1
e1 / e2 = S e4

defns
L :: '' ::=

defn
G |-L e ok :: :: L_exp :: 'L_exp_' {{ com well-formedness }}
by

x \in G
---------- :: var
G |-L x ok

---------- :: zero
G |-L 0 ok

G |-L e ok
------------ :: succ
G |-L S e ok

G |-L e1 ok
G |-L e2 ok
-------------- :: app
G |-L e1 e2 ok

G |-L e1 ok
G |-L e2 ok
---------------- :: prim
G |-L e1 p e2 ok

G , x ok |-L e ok
----------------- :: lam
G |-L \ x . e ok

G , x ok |-L e ok
------------------ :: fix
G |-L fix x . e ok

G |-L e ok
G |-L e0 ok
G , x ok |-L e1 ok
------------------------------ :: ifz
G |-L ifz e { e0 | x . e1 } ok

defn
G |-L e1 == e2 :: :: L_eq :: 'L_eq_' {{ com equivalence }}
by

G |-L e ok
------------ :: refl
G |-L e == e

G |-L e == e'
------------ :: symm
G |-L e' == e

G |-L e  == e'
G |-L e' == e''
-------------- :: trans
G |-L e  == e''


G |-L e1 == e1'
G |-L e2 == e2'
--------------------- :: app'
G |-L e1 e2 == e1' e2'

G |-L e1 == e1'
G |-L e2 == e2'
-------------------------- :: prim'
G |-L e1 p e2 == e1' p e2'

G , x ok |-L e == e'
------------------------ :: lam'
G |-L \ x . e == \ x . e'

G , x ok |-L e == e'
----------------------------- :: fix'
G |-L fix x . e == fix x . e'

G |-L e == e'
G |-L e0 == e0'
G , x ok |-L e1 == e1'
------------------------------------------------------- :: ifz'
G |-L ifz e { e0 | x . e1 } == ifz e' { e0' | x . e1' }

G , x ok |-L e2 ok
G |-L e1 ok
------------------------------------- :: app
G |-L ( \ x . e2 ) e1 == [ e1 / x ] e2

e1 p e2 = e3
------------------- :: prim
G |-L e1 p e2 == e3

G , x ok |-L e ok
-------------------------------------- :: fix
G |-L fix x . e == [ fix x . e / x ] e

G |-L e0 ok
--------------------------------- :: ifz0
G |-L ifz 0 { e0 | x . e1 } == e0

G |-L e ok
G , x ok |-L e1 ok
--------------------------------------------- :: ifz1
G |-L ifz S e { e0 | x . e1 } == [ e / x ] e1

defns
K :: '' ::=

defn
G |-K e ok :: :: K_exp :: 'K_exp_' {{ com well-formedness }}
by

x \in G
---------- :: var
G |-K x ok

---------- :: zero
G |-K 0 ok

G |-K e ok
------------ :: succ
G |-K S e ok

G |-K e1 ok
G |-K e2 ok
-------------- :: app
G |-K e1 e2 ok

G |-K e1 ok
G |-K e2 ok
---------------- :: prim
G |-K e1 p e2 ok

G , x ok |-K e ok
----------------- :: lam
G |-K \ x . e ok

G , x ok |-K e ok
------------------ :: fix
G |-K fix x . e ok

G |-K e ok
G |-K e0 ok
G , x ok |-K e1 ok
------------------------------ :: ifz
G |-K ifz e { e0 | x . e1 } ok

G |-K e ok
G , x ok |-K e' ok
------------------------ :: let
G |-K let x = e in e' ok

G |-K e ok
--------------- :: halt
G |-K halt e ok

defn
G |-K e1 |-> e2 :: :: step :: 'K_step_' {{ com reduction }}
by

G , x ok |-K e2 ok
G |-K e1 ok
--------------------------------------- :: app
G |-K ( \ x . e2 ) e1 |-> [ e1 / x ] e2

e1 p e2 = e3
-------------------- :: prim
G |-K e1 p e2 |-> e3

G , x ok |-K e ok
--------------------------------------- :: fix
G |-K fix x . e |-> [ fix x . e / x ] e

G |-K e0 ok
---------------------------------- :: ifz0
G |-K ifz 0 { e0 | x . e1 } |-> e0

G |-K e ok
G , x ok |-K e1 ok
---------------------------------------------- :: ifz1
G |-K ifz S e { e0 | x . e1 } |-> [ e / x ] e1
